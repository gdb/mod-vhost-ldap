%
% myformat.sty for the Python doc  [updated to work with Latex2e]
%

\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{myformat}
             [1998/01/11 
                 LaTeX package (Python manual markup)]

% Optional packages:
%
% If processing of these documents fails at your TeX installation,
% these may be commented out (independently) to make things work.
% These are both supplied with the current version of the teTeX
% distribution.
%
% The "fancyhdr" package makes nicer page footers reasonable to
% implement, and is used to put the chapter and section information in 
% the footers.
%
% The "times" package makes the default font the PostScript Times
% font, which makes for smaller PostScript and a font that more people 
% like.
%
\RequirePackage{fancyhdr}\typeout{Using fancier footers than usual....}
\RequirePackage{times}\typeout{Using times fonts instead of Computer Modern.}


% Increase printable page size (copied from fullpage.sty)
\topmargin 0pt
\advance \topmargin by -\headheight
\advance \topmargin by -\headsep

\textheight 8.7in

\oddsidemargin 0pt
\evensidemargin \oddsidemargin
\marginparwidth 0.5in

\textwidth 6.5in

% Style parameters and macros used by most documents here
\raggedbottom
\sloppy
\parindent =       0mm
\parskip =         2mm

% uncomment the following line if you have the fancyhdr package available:
\pagestyle{empty}			% start this way; change for
\pagenumbering{roman}			% ToC & chapters
\setcounter{secnumdepth}{1}

% Redefine the 'normal' header/footer style when using "fancyhdr" package:
\@ifundefined{fancyhf}{}{
  \fancypagestyle{normal}{%
    \fancyhf{}%
    \fancyfoot[LE,RO]{{\HeaderFamily\thepage}}%
    \fancyfoot[LO]{{\HeaderFamily\nouppercase{\rightmark}}}%
    \fancyfoot[RE]{{\HeaderFamily\nouppercase{\leftmark}}}%
    \renewcommand{\headrulewidth}{0pt}%
    \renewcommand{\footrulewidth}{0.4pt}%
  }
  % Update the plain style so we get the page number & footer line,
  % but not a chapter or section title.  This is to keep the first
  % page of a chapter and the blank page between chapters `clean.'
  \fancypagestyle{plain}{%
    \fancyhf{}%
    \fancyfoot[LE,RO]{{\HeaderFamily\thepage}}%
    \renewcommand{\headrulewidth}{0pt}%
    \renewcommand{\footrulewidth}{0.4pt}%
  }
  % Redefine \cleardoublepage so that the blank page between chapters
  % gets the plain style and not the fancy style.
  \renewcommand{\cleardoublepage}{\clearpage\if@twoside \ifodd\c@page\else
    \hbox{}
    \thispagestyle{plain}
    \newpage
    \if@twocolumn\hbox{}\newpage\fi\fi\fi}
}

% old code font selections:
\let\codefont=\tt
\let\sectcodefont=\tt

% (Haven't found a new one that gets <, >, and _ right without being
% monospaced.)

% Variable used by begin code command
\newlength{\codewidth}

\newcommand{\examplevspace}{2mm}
\newcommand{\exampleindent}{1cm}
% Command to start a code block (follow this by \begin{verbatim})
\newcommand{\b@code}{%
  \begingroup%
  \setlength{\parindent}\exampleindent%
  % Calculate the text width for the minipage:
  \setlength{\codewidth}{\linewidth}%
  \addtolength{\codewidth}{-\parindent}%
  %
  \par%
  \vspace\examplevspace%
  \indent%
  \begin{minipage}[t]{\codewidth}%
  \small%
}

% Command to end a code block (precede this by \end{verbatim})
\newcommand{\e@code}{%
  \end{minipage}%
  \endgroup%
}

\let\OldVerbatim=\verbatim
\let\OldEndVerbatim=\endverbatim
\renewcommand{\verbatim}{\b@code\OldVerbatim}
\renewcommand{\endverbatim}{\OldEndVerbatim\e@code}

% Augment the sectioning commands used to get our own font family in
% place:
\newcommand{\HeaderFamily}{\sffamily}
\renewcommand{\section}{\@startsection {section}{1}{\z@}%
                                   {-3.5ex \@plus -1ex \@minus -.2ex}%
                                   {2.3ex \@plus.2ex}%
                                   {\reset@font\Large\HeaderFamily}}
\renewcommand{\subsection}{\@startsection{subsection}{2}{\z@}%
                                     {-3.25ex\@plus -1ex \@minus -.2ex}%
                                     {1.5ex \@plus .2ex}%
                                     {\reset@font\large\HeaderFamily}}
\renewcommand{\subsubsection}{\@startsection{subsubsection}{3}{\z@}%
                                     {-3.25ex\@plus -1ex \@minus -.2ex}%
                                     {1.5ex \@plus .2ex}%
                                     {\reset@font\normalsize\HeaderFamily}}
\renewcommand{\paragraph}{\@startsection{paragraph}{4}{\z@}%
                                    {3.25ex \@plus1ex \@minus.2ex}%
                                    {-1em}%
                                    {\reset@font\normalsize\HeaderFamily}}
\renewcommand{\subparagraph}{\@startsection{subparagraph}{5}{\parindent}%
                                       {3.25ex \@plus1ex \@minus .2ex}%
                                       {-1em}%
                                      {\reset@font\normalsize\HeaderFamily}}


% Underscore hack (only act like subscript operator if in math mode)
%
% The following is due to Mark Wooding (the old version didn't work with
% Latex 2e.

\DeclareRobustCommand\hackscore{%
  \ifmmode_\else\textunderscore\fi%
}
\begingroup
\catcode`\_\active
\def\next{%
  \AtBeginDocument{\catcode`\_\active\def_{\hackscore{}}}%
}
\expandafter\endgroup\next

%
% This is the old hack, which didn't work with 2e.
% You should not need this since the rest of the documentation is now
% LaTeX2e-only.
%
%\def\_{\ifnum\fam=\ttfamily \char'137\else{\tt\char'137}\fi}
%\catcode`\_=12
%\catcode`\_=\active\def_{\ifnum\fam=\ttfamily \char'137 \else{\tt\char'137}\fi}



%%  Lots of index-entry generation support.

% Command to wrap around stuff that refers to function / module /
% attribute names  in the index.  Default behavior: like \code{}.  To
% just keep the index entries in the roman font, uncomment the second
% definition to use instead; it matches O'Reilly style more.
%
\newcommand{\idxcode}[1]{\codefont{#1}}
%\renewcommand{\idxcode}[1]{#1}

% Command to generate two index entries (using subentries)
\newcommand{\indexii}[2]{\index{#1!#2}\index{#2!#1}}

% And three entries (using only one level of subentries)
\newcommand{\indexiii}[3]{\index{#1!#2 #3}\index{#2!#3, #1}\index{#3!#1 #2}}

% And four (again, using only one level of subentries)
\newcommand{\indexiv}[4]{
\index{#1!#2 #3 #4}
\index{#2!#3 #4, #1}
\index{#3!#4, #1 #2}
\index{#4!#1 #2 #3}
}

% Command to generate a reference to a function, statement, keyword,
% operator.
\newcommand{\stindex}[1]{\indexii{statement}{#1@{\idxcode{#1}}}}
\newcommand{\opindex}[1]{\indexii{operator}{#1@{\idxcode{#1}}}}
\newcommand{\exindex}[1]{\indexii{exception}{#1@{\idxcode{#1}}}}
\newcommand{\obindex}[1]{\indexii{object}{#1}}
\newcommand{\bifuncindex}[1]{\index{#1@{\idxcode{#1}} (built-in function)}}

% Add an index entry for a module
\newcommand{\refmodule}[2]{\index{#1@{\idxcode{#1}} (#2module)}}
\newcommand{\refmodindex}[1]{\refmodule{#1}{}}
\newcommand{\refbimodindex}[1]{\refmodule{#1}{built-in }}
\newcommand{\refstmodindex}[1]{\refmodule{#1}{standard }}

% support for the module index
\newwrite\modindexfile
\openout\modindexfile=modules.idx

% Add the defining entry for a module
\newcommand{\defmodindex}[2]{%
  \index{#1@{\idxcode{#1}} (#2module)|textbf}%
  \write\modindexfile{#1 \thepage}}
\newcommand{\modindex}[1]{\defmodindex{#1}{}}
\newcommand{\bimodindex}[1]{\defmodindex{#1}{built-in }}
\newcommand{\stmodindex}[1]{\defmodindex{#1}{standard }}

% Additional string for an index entry
\newcommand{\index@subitem}{}
\newcommand{\setindexsubitem}[1]{\renewcommand{\index@subitem}{#1}}
\newcommand{\ttindex}[1]{\index{#1@{\idxcode{#1}} \index@subitem}}


% from user-level, fulllineitems should be called as an environment
\def\fulllineitems{\list{}{\labelwidth \leftmargin \labelsep 0pt
\rightmargin 0pt \topsep -\parskip \partopsep \parskip
\itemsep -\parsep
\let\makelabel\itemnewline}}
\let\endfulllineitems\endlist


% cfuncdesc should be called as
% \begin{cfuncdesc}{type}{name}{arglist}
% ... description ...
% \end{cfuncdesc}
\newcommand{\cfuncline}[3]{\item[\code{#1 \bfcode{#2}(\varvars{#3})}]\ttindex{#2}}
\newcommand{\cfuncdesc}[3]{\fulllineitems\cfuncline{#1}{#2}{#3}}
\let\endcfuncdesc\endfulllineitems

\newcommand{\cvarline}[2]{\item[\code{#1 \bfcode{#2}}]\ttindex{#2}}
\newcommand{\cvardesc}[2]{\fulllineitems\cvarline{#1}{#2}}
\let\endcvardesc\endfulllineitems

\newcommand{\ctypeline}[1]{\item[\bfcode{#1}]\ttindex{#1}}
\newcommand{\ctypedesc}[1]{\fulllineitems\ctypeline{#1}}
\let\endctypedesc\endfulllineitems

% funcdesc should be called as an \begin{funcdesc} ... \end{funcdesc}
\newcommand{\funcline}[2]{\funclineni{#1}{#2}\ttindex{#1}}
\newcommand{\funcdesc}[2]{\fulllineitems\funcline{#1}{#2}}
\let\endfuncdesc\endfulllineitems
\newcommand{\optional}[1]{{\textnormal{\Large[}}{#1}\hspace{0.5mm}{\textnormal{\Large]}}}

% similar to {funcdesc}, but doesn't add to the index
\newcommand{\funclineni}[2]{\item[\code{\bfcode{#1}(\varvars{#2})}]}
\newcommand{\funcdescni}[2]{\fulllineitems\funclineni{#1}{#2}}
\let\endfuncdescni\endfulllineitems

% same for excdesc
\newcommand{\excline}[1]{\item[\bfcode{#1}]\ttindex{#1}}
\newcommand{\excdesc}[1]{\fulllineitems\excline{#1}}
\let\endexcdesc\endfulllineitems

% same for datadesc
\newcommand{\dataline}[1]{\datalineni{#1}\ttindex{#1}}
\newcommand{\datadesc}[1]{\fulllineitems\dataline{#1}}
\let\enddatadesc\endfulllineitems

% similar to {datadesc}, but doesn't add to the index
\newcommand{\datalineni}[1]{\item[\bfcode{#1}]}
\newcommand{\datadescni}[1]{\fulllineitems\datalineni{#1}}
\let\enddatadescni\endfulllineitems


% opcodedesc should be called as an \begin{opcodedesc} ... \end{opcodedesc}
\newcommand{\opcodeline}[2]{\item[\bfcode{#1}\quad\var{#2}]}
\newcommand{\opcodedesc}[2]{\fulllineitems\opcodeline{#1}{#2}}
\let\endopcodedesc\endfulllineitems


\let\nodename=\label

% For these commands, use \command{} to get the typography right, not 
% {\command}.  This works better with the texinfo translation.
\newcommand{\ABC}{{\sc abc}}
\newcommand{\UNIX}{{\sc Unix}}
\newcommand{\POSIX}{POSIX}
\newcommand{\ASCII}{{\sc ascii}}
\newcommand{\Cpp}{C\protect\raisebox{.18ex}{++}}
\newcommand{\C}{C}
\newcommand{\EOF}{{\sc eof}}
\newcommand{\NULL}{\code{NULL}}

% code is the most difficult one...
\newcommand{\code}[1]{{\@vobeyspaces\@noligs\def\{{\char`\{}\def\}{\char`\}}\def\~{\char`\~}\def\^{\char`\^}\def\e{\char`\\}\def\${\char`\$}\def\#{\char`\#}\def\&{\char`\&}\def\%{\char`\%}%
\mbox{\codefont{#1}}}}

\newcommand{\bfcode}[1]{\code{\bfseries#1}} %bold-faced code font
\newcommand{\kbd}[1]{\mbox{\tt #1}}
\newcommand{\key}[1]{\mbox{\tt #1}}
\newcommand{\samp}[1]{\mbox{`\code{#1}'}}
% This weird definition of \var{} allows it to always appear in roman
% italics, and won't get funky in code fragments when we play around
% with fonts.
\newcommand{\var}[1]{\mbox{\normalsize\textrm{\textit{#1\/}}}}
\newcommand{\dfn}[1]{{\em #1\/}}
\renewcommand{\emph}[1]{{\em #1\/}}
\newcommand{\strong}[1]{{\bf #1}}
% let's experiment with a new font:
\newcommand{\file}[1]{\mbox{`\small\textsf{#1}'}}
%\@ifundefined{pdfannotlink}{%
  \newcommand{\url}[1]{\mbox{\small\textsf{#1}}}%
%}{
%  \newcommand{\url}[1]{{%
%    \pdfannotlink user{/S /URI /URI (#1)}%
%    \mbox{\small\textsf{#1}}}}%
%}
\let\email=\url

\newcommand{\varvars}[1]{{\def\,{\/{\char`\,}}\var{#1}}}

\newif\iftexi\texifalse
\newif\iflatex\latextrue

% These should be used for all references to identifiers which are
% used to refer to instances of specific language constructs.  See the
% names for specific semantic assignments.
%
% For now, don't do anything really fancy with them; just use them as
% logical markup.  This might change in the future.
%
\let\module=\code
\let\keyword=\code
\let\exception=\code
\let\class=\code
\let\function=\code
\let\cfunction=\code
\let\method=\code

% constants defined in Python modules, not language constants:
\let\constant=\code

\newcommand{\manpage}[2]{{\emph{#1}(#2)}}
\newcommand{\rfc}[1]{RFC #1\index{RFC!RFC #1}}
\newcommand{\program}[1]{\strong{#1}}


\newenvironment{tableii}[4]{\begin{center}\def\lineii##1##2{\csname#2\endcsname{##1}&##2\\}\begin{tabular}{#1}\hline#3&#4\\
\hline}{\hline\end{tabular}\end{center}}

\newenvironment{tableiii}[5]{\begin{center}\def\lineiii##1##2##3{\csname#2\endcsname{##1}&##2&##3\\}\begin{tabular}{#1}\hline#3&#4&#5\\
\hline}{\hline\end{tabular}\end{center}}

\newcommand{\itemnewline}[1]{\@tempdima\linewidth
\advance\@tempdima \leftmargin\makebox[\@tempdima][l]{#1}}

\newcommand{\sectcode}[1]{{\sectcodefont{#1}}}

% Cross-referencing (AMK)
% Sample usage:
%  \begin{seealso}
%    \seemodule{rand}{Uniform random number generator}; % Module xref
%    \seetext{\emph{Encyclopedia Britannica}}.          % Ref to a book
%  \end{seealso}

\newenvironment{seealso}[0]{\strong{See Also:}\par}{\par}
\newcommand{\seemodule}[2]{\ref{module-#1}:%
  \quad Module \module{#1}\quad(#2)}
\newcommand{\seebimodule}[2]{\ref{module-#1}:%
  \quad Built-in Module \module{#1}\quad(#2)}
\newcommand{\seestmodule}[2]{\ref{module-#1}:%
  \quad Standard Module \module{#1}\quad(#2)}
\newcommand{\seetext}[1]{\par{#1}}

% Fix the theindex environment to add an entry to the Table of
% Contents; this is much nicer than just having to jump to the end of
% the book and flip around, especially with multiple indexes.
%
\let\OldTheindex=\theindex
\renewcommand{\theindex}{%
  \cleardoublepage%
  \OldTheindex%
  \addcontentsline{toc}{chapter}{\indexname}%
}

%  Use a similar trick to catch the end of the {abstract} environment,
%  but here make sure the abstract is followed by a blank page if the
% 'openright' option is used.
%
\let\OldEndAbstract=\endabstract
\renewcommand{\endabstract}{
  \if@openright
    \ifodd\value{page}
      \typeout{Adding blank page after the abstract.}
      \vfil\pagebreak
    \fi
  \fi
  \OldEndAbstract
}

% This wraps the \tableofcontents macro with all the magic to get the
% spacing right and have the right number of pages if the 'openright'
% option has been used.  This eliminates a fair amount of crud in the
% individual document files.
%
\let\OldTableofcontents=\tableofcontents
\renewcommand{\tableofcontents}[0]{%
  \setcounter{page}{1}%
  \pagebreak%
  \pagestyle{plain}%
  {%
  \parskip = 0mm%
  \OldTableofcontents%
  \if@openright%
    \ifodd\value{page}%
      \typeout{Adding blank page after the table of contents.}%
      \pagebreak\hspace{0pt}%
    \fi%
  \fi%
  }%
  \cleardoublepage%
  \pagenumbering{arabic}%
  \@ifundefined{fancyhf}{}{\pagestyle{normal}}%
}

% Allow the release number to be specified independently of the
% \date{}.  This allows the date to reflect the document's date and
% release to specify the Python release that is documented.
%
\newcommand{\@release}{}
\newcommand{\version}{}
\newcommand{\releasename}{Release}
\newcommand{\release}[1]{%
  \renewcommand{\@release}{\releasename\space\version}%
  \renewcommand{\version}{#1}}

% Allow specification of the author's address separately from the
% author's name.  This can be used to format them differently, which
% is a good thing.
%
\newcommand{\@authoraddress}{}
\newcommand{\authoraddress}[1]{\renewcommand{\@authoraddress}{#1}}

% Change the title page to look a bit better, and fit in with the
% fncychap ``Bjarne'' style a bit better.
%
\renewcommand{\maketitle}{\begin{titlepage}%
  \let\footnotesize\small
  \let\footnoterule\relax
  \@ifundefined{ChTitleVar}{}{%
    \mghrulefill{\RW}}%
  \@ifundefined{pdfinfo}{}{
    \pdfinfo
      author {\@author}
      title {\@title}
  }
  \begin{flushright}%
    {\rm\Huge\HeaderFamily \@title \par}%
    {\em\LARGE\HeaderFamily \@release \par}
    \vfill
    {\LARGE\HeaderFamily \@author \par}
    \vfill\vfill
    {\large
     \@date \par
     \vskip 3em
     \@authoraddress \par
    }%
  \end{flushright}%\par
  \@thanks
  \end{titlepage}%
  \setcounter{footnote}{0}%
  \let\thanks\relax\let\maketitle\relax
  \gdef\@thanks{}\gdef\@author{}\gdef\@title{}
}

% ``minitoc'' support; works fairly well but not all chapters do well
% with it.  Has some weird side effects that I haven't tracked down;
% don't use it for real at this time.
%
% To enable, uncomment the following line only (don't do it!):
%\RequirePackage{minitoc}
%
% Maybe this should all be removed.  But I think something like this
% would be really nice if it can be integrated with the ``list of
% modules'' at the top of module-documentation chapters.  But it might 
% require a completely new environment, perhaps based on {list}.

% Leave the rest as-is:
\newif\if@minitocprinted
\newcommand{\suppressminitoc}{\@minitocprintedtrue}
\@ifundefined{minitoc}{
  % allow \minitoc to be used even if the package hasn't been loaded.
  \newcommand{\minitoc}{\@minitocprintedtrue}
}{
  \dominitoc
  \newif\if@firstsection
  \let\OldChapter=\chapter
  \let\OldSection=\section
  \let\OldMinitoc=\minitoc
  % This will only include the minitoc once per chapter
  \renewcommand{\minitoc}{%
    \if@minitocprinted{}\else%
      \OldMinitoc%
      \@minitocprintedtrue%
    \fi%
  }
  % This includes a minitoc before the first \section{}, if it hasn't
  % already been printed using an explicit \minitoc call.
  \newcommand{\NewSection}[1]{%
    \if@firstsection%
      \if@minitocprinted{}\else%
        \vskip 15pt%
        \minitoc%
        \@firstsectionfalse%
      \fi%
    \fi%
    \OldSection{#1}%
  }
  % Reset the flags for each chaper to let the automatic stuff work.
  \newcommand{\NewChapter}[1]{%
    \OldChapter{#1}%
    \@firstsectiontrue%
    \@minitocprintedfalse%
  }
  \let\chapter=\NewChapter
  \let\section=\NewSection
  \typeout{Including mini Tables of Contents in each chapter.}
}

% This sets up the fancy chapter headings that make the documents look
% at least a little better than the usual LaTeX output.
%
\RequirePackage[Bjarne]{fncychap}
\@ifundefined{ChTitleVar}{}{
  \ChNameVar{\raggedleft\normalsize\HeaderFamily}
  \ChNumVar{\raggedleft \bfseries\Large\HeaderFamily}
  \ChTitleVar{\raggedleft \rm\Huge\HeaderFamily}
  % This creates chapter heads without the leading \vspace*{}:
  \def\@makechapterhead#1{%
    {\parindent \z@ \raggedright \normalfont
      \ifnum \c@secnumdepth >\m@ne
        \DOCH
      \fi
      \interlinepenalty\@M
      \DOTI{#1}
    }
  }
  \typeout{Using fancy chapter headings.}
}
